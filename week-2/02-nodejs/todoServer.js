/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const z = require("zod");
const { v4: uuidv4 } = require("uuid");
const app = express();

/* Todo Database */
let todos = [
  {
    _id: "f0e0d6e5-2e53-4b1a-8f99-d44261c5193c",
    title: "Title 1",
    completed: false,
    description: "Description 1",
  },
];

/* Middlewares */
function validateTodoId(req, res, next) {
  const { success } = z.string().uuid().safeParse(req.params.id);
  if (!success) return res.send(404).json({ error: "Non-existent ID" });

  next();
}

function validateTodoData(req, res, next) {
  const schema = z.object({
    title:
      req.method === "POST" ? z.optional(z.string().min(5)) : z.string().min(5),
    completed: req.method === "POST" ? z.boolean() : z.optional(z.boolean()),
    description:
      req.method === "POST"
        ? z.optional(z.string().min(10))
        : z.string().min(10),
  });

  const { success } = schema.safeParse(req.body);
  if (!success) return res.status(404).send({ error: "Invalid inputs" });

  next();
}

app.use(express.json());

app.get("/todos", (_, res) => {
  return res.status(200).json(todos);
});

app.get("/todos/:id", validateTodoId, (req, res) => {
  const todo = todos.filter((todo) => req.params.id === todo._id);

  if (!todo) return res.status(404).send("404 Not Found");
  return res.status(200).json(todo);
});

app.post("/todos", validateTodoData, (req, res) => {
  const { title, description, completed } = req.body;
  const _id = uuidv4();

  todos.push({
    _id,
    title,
    completed,
    description,
  });

  return res.status(201).json({ id: _id });
});

app.delete("/todos/:id", validateTodoId, (req, res) => {
  let newTodos = todos.filter((todo) => todo._id !== req.params.id);
  if (newTodos.length === todos.length)
    return res.status(404).send("Todo not found");

  todos = newTodos;
  return res.status(200).send("Todo has been deleted");
});

app.put("/todos/:id", validateTodoId, validateTodoData, (req, res) => {
  todos.forEach((todo) => {
    if (todo._id === req.params.id) {
      if (req.body.title) todo.title = req.body.title;
      if (req.body.description) todo.description = req.body.description;
      if (req.body.completed) todo.completed = req.body.completed;
    }
  });
  res.status(200).send("Todo has been updated");
});

app.all("*", (_, res) => {
  res.status(404).send("Route not found");
});

app.listen(3000);

module.exports = app;
